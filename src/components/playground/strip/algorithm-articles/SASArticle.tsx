import React, { useEffect } from 'react';
import ReactTooltip from 'react-tooltip';

interface SASArticleProps {}
const NARROW_COLOR = '#FBBF24';
const WIDE_COLOR = '#60A5FA';

const WideText: React.FC = ({ children }) => (
  <em style={{ color: WIDE_COLOR }} className="font-semibold">
    {children}
  </em>
);
const NarrowText: React.FC = ({ children }) => (
  <em style={{ color: NARROW_COLOR }} className="font-semibold">
    {children}
  </em>
);
const SASArticle: React.FC<SASArticleProps> = ({}) => {
  useEffect(() => {
    ReactTooltip.rebuild();
  });

  return (
    <>
      <p>Size alternating stack is a modern attempt at a strip packing algortihm.</p>
      <h4>Preparation</h4>
      <p>
        Since this is an{' '}
        <span data-tip="Means the entire input is known beforehand" className="underline decoration-dotted decoration-gray-500 decoration-1 ">
          offline
        </span>{' '}
        algorithm, we know the entire input beforehand. We utilize this to sort it. The input is sorted into two lists. One where the rectangles are
        more wide than tall called <i>wide rectangles</i> and the rest in another called <i>narrow rectangles</i>. The wide rectangles are sorted by
        non-increasing width and the narrow rectangles are sorted by non-increasing height.
      </p>
      <div className="flex flex-col items-center">
        <div className="flex flex-col items-center p-5 bg-gray-700 rounded-lg not-prose">
          <svg width="798" height="158" viewBox="0 0 798 158" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect y="126" width="150" height="32" fill={NARROW_COLOR} />
            <rect x="165" y="59" width="78" height="99" fill={NARROW_COLOR} />
            <rect x="258" y="142" width="21" height="16" fill={NARROW_COLOR} />
            <rect x="294" y="30" width="78" height="128" fill={NARROW_COLOR} />
            <rect x="387" y="109" width="78" height="49" fill={NARROW_COLOR} />
            <rect x="480" width="149" height="158" fill={NARROW_COLOR} />
            <rect x="652" y="139" width="105" height="19" fill={NARROW_COLOR} />
            <rect x="772" y="69" width="26" height="89" fill={NARROW_COLOR} />
          </svg>

          <p className="mt-5 text-sm text-white">Unsorted input</p>
        </div>
        <div className="flex flex-col items-center p-5 mt-10 bg-gray-700 rounded-lg not-prose">
          <svg width="404" height="158" viewBox="0 0 404 158" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="157" height="158" fill={NARROW_COLOR} />
            <rect x="178.667" y="30" width="78" height="128" fill={NARROW_COLOR} />
            <rect x="278.333" y="59" width="78" height="99" fill={NARROW_COLOR} />
            <rect x="378" y="69" width="26" height="89" fill={NARROW_COLOR} />
          </svg>

          <p className="mt-5 text-sm text-white">Narrow rectangles, tallest to shortest</p>
        </div>
        <div className="flex flex-col items-center p-5 mt-10 bg-gray-700 rounded-lg not-prose">
          <svg width="399" height="49" viewBox="0 0 399 49" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect y="17" width="150" height="32" fill={WIDE_COLOR} />
            <rect x="165" y="30" width="105" height="19" fill={WIDE_COLOR} />
            <rect x="285" width="78" height="49" fill={WIDE_COLOR} />
            <rect x="378" y="33" width="21" height="16" fill={WIDE_COLOR} />
          </svg>

          <p className="mt-5 text-sm text-white">Wide rectangles, widest to narrrowest</p>
        </div>
      </div>
      <h4>Execution</h4>
      <p>
        The algorithm works by looking at the first rectangle of both lists and taking the tallest of them. This rectangle initalizes a level, by
        placing it to the bottom left of it.
      </p>
      <ol>
        <li>
          If the rectangle was from the <NarrowText>narrow</NarrowText> list, we place the first rectangle from the <WideText>wide</WideText> list. If
          there are additional vertical space left in the level, we place the next <WideText>wide</WideText> rectangle on top of the previous. If
          there is a difference in the width, a gap is created on the right side of the rectangle. In this area we place the first{' '}
          <NarrowText>narrow</NarrowText> rectangle that will fit within the height. This continues until we run out of vertical space in the level.
        </li>
        <li>
          If the rectangle was from the <WideText>wide</WideText> we place as many <NarrowText>narrow</NarrowText> rectangles as possible next to it.
        </li>
      </ol>
      <p>This is repeated until the entire input is packed</p>
      <div className="flex flex-col items-center">
        <div className="flex flex-col items-center p-5 bg-gray-700 rounded-lg not-prose max-w-min">
          <svg width="356" height="400" viewBox="0 0 356 400" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="356" height="398" fill="white" />
            <rect x="149.5" y="335.5" width="20" height="15" fill={WIDE_COLOR} stroke="black" />
            <rect x="78.5" y="190.5" width="120" height="18" fill={WIDE_COLOR} stroke="black" />
            <rect x="0.5" y="13.5" width="77" height="98" fill={NARROW_COLOR} stroke="black" />
            <rect x="170.5" y="262.5" width="25" height="88" fill={NARROW_COLOR} stroke="black" />
            <rect x="149.5" y="351.5" width="77" height="48" fill={WIDE_COLOR} stroke="black" />
            <rect x="78.5" y="209.5" width="149" height="31" fill={WIDE_COLOR} stroke="black" />
            <rect x="0.5" y="113.5" width="77" height="127" fill={NARROW_COLOR} stroke="black" />
            <rect x="0.5" y="242.5" width="148" height="157" fill={NARROW_COLOR} stroke="black" />
            <path d="M79.6953 314.562V326H78.25V316.367L75.3359 317.43V316.125L79.4688 314.562H79.6953Z" fill="black" />
            <path
              d="M192.398 379.812V381H184.953V379.961L188.68 375.812C189.138 375.302 189.492 374.87 189.742 374.516C189.997 374.156 190.174 373.836 190.273 373.555C190.378 373.268 190.43 372.977 190.43 372.68C190.43 372.305 190.352 371.966 190.195 371.664C190.044 371.357 189.82 371.112 189.523 370.93C189.227 370.747 188.867 370.656 188.445 370.656C187.94 370.656 187.518 370.755 187.18 370.953C186.846 371.146 186.596 371.417 186.43 371.766C186.263 372.115 186.18 372.516 186.18 372.969H184.734C184.734 372.328 184.875 371.742 185.156 371.211C185.438 370.68 185.854 370.258 186.406 369.945C186.958 369.628 187.638 369.469 188.445 369.469C189.164 369.469 189.779 369.596 190.289 369.852C190.799 370.102 191.19 370.456 191.461 370.914C191.737 371.367 191.875 371.898 191.875 372.508C191.875 372.841 191.818 373.18 191.703 373.523C191.594 373.862 191.44 374.201 191.242 374.539C191.049 374.878 190.823 375.211 190.562 375.539C190.307 375.867 190.034 376.19 189.742 376.508L186.695 379.812H192.398Z"
              fill="black"
            />
            <path
              d="M158.055 342.602H159.086C159.591 342.602 160.008 342.518 160.336 342.352C160.669 342.18 160.917 341.948 161.078 341.656C161.245 341.359 161.328 341.026 161.328 340.656C161.328 340.219 161.255 339.852 161.109 339.555C160.964 339.258 160.745 339.034 160.453 338.883C160.161 338.732 159.792 338.656 159.344 338.656C158.938 338.656 158.578 338.737 158.266 338.898C157.958 339.055 157.716 339.279 157.539 339.57C157.367 339.862 157.281 340.206 157.281 340.602H155.836C155.836 340.023 155.982 339.497 156.273 339.023C156.565 338.549 156.974 338.172 157.5 337.891C158.031 337.609 158.646 337.469 159.344 337.469C160.031 337.469 160.633 337.591 161.148 337.836C161.664 338.076 162.065 338.435 162.352 338.914C162.638 339.388 162.781 339.979 162.781 340.688C162.781 340.974 162.714 341.281 162.578 341.609C162.448 341.932 162.242 342.234 161.961 342.516C161.685 342.797 161.326 343.029 160.883 343.211C160.44 343.388 159.909 343.477 159.289 343.477H158.055V342.602ZM158.055 343.789V342.922H159.289C160.013 342.922 160.612 343.008 161.086 343.18C161.56 343.352 161.932 343.581 162.203 343.867C162.479 344.154 162.672 344.469 162.781 344.812C162.896 345.151 162.953 345.49 162.953 345.828C162.953 346.359 162.862 346.831 162.68 347.242C162.503 347.654 162.25 348.003 161.922 348.289C161.599 348.576 161.219 348.792 160.781 348.938C160.344 349.083 159.867 349.156 159.352 349.156C158.857 349.156 158.391 349.086 157.953 348.945C157.521 348.805 157.138 348.602 156.805 348.336C156.471 348.065 156.211 347.734 156.023 347.344C155.836 346.948 155.742 346.497 155.742 345.992H157.188C157.188 346.388 157.273 346.734 157.445 347.031C157.622 347.328 157.872 347.56 158.195 347.727C158.523 347.888 158.909 347.969 159.352 347.969C159.794 347.969 160.174 347.893 160.492 347.742C160.815 347.586 161.062 347.352 161.234 347.039C161.411 346.727 161.5 346.333 161.5 345.859C161.5 345.385 161.401 344.997 161.203 344.695C161.005 344.388 160.724 344.161 160.359 344.016C160 343.865 159.576 343.789 159.086 343.789H158.055Z"
              fill="black"
            />
            <path
              d="M187.633 310.172V311.359H179.414V310.508L184.508 302.625H185.688L184.422 304.906L181.055 310.172H187.633ZM186.047 302.625V314H184.602V302.625H186.047Z"
              fill="black"
            />
            <path
              d="M35.7734 177.586L34.6172 177.289L35.1875 171.625H41.0234V172.961H36.4141L36.0703 176.055C36.2786 175.935 36.5417 175.823 36.8594 175.719C37.1823 175.615 37.5521 175.562 37.9688 175.562C38.4948 175.562 38.9661 175.654 39.3828 175.836C39.7995 176.013 40.1536 176.268 40.4453 176.602C40.7422 176.935 40.9688 177.336 41.125 177.805C41.2812 178.273 41.3594 178.797 41.3594 179.375C41.3594 179.922 41.2839 180.424 41.1328 180.883C40.987 181.341 40.7656 181.742 40.4688 182.086C40.1719 182.424 39.7969 182.688 39.3438 182.875C38.8958 183.062 38.3672 183.156 37.7578 183.156C37.2995 183.156 36.8646 183.094 36.4531 182.969C36.0469 182.839 35.6823 182.643 35.3594 182.383C35.0417 182.117 34.7812 181.789 34.5781 181.398C34.3802 181.003 34.2552 180.539 34.2031 180.008H35.5781C35.6406 180.435 35.7656 180.794 35.9531 181.086C36.1406 181.378 36.3854 181.599 36.6875 181.75C36.9948 181.896 37.3516 181.969 37.7578 181.969C38.1016 181.969 38.4062 181.909 38.6719 181.789C38.9375 181.669 39.1615 181.497 39.3438 181.273C39.526 181.049 39.6641 180.779 39.7578 180.461C39.8568 180.143 39.9062 179.786 39.9062 179.391C39.9062 179.031 39.8568 178.698 39.7578 178.391C39.6589 178.083 39.5104 177.815 39.3125 177.586C39.1198 177.357 38.8828 177.18 38.6016 177.055C38.3203 176.924 37.9974 176.859 37.6328 176.859C37.1484 176.859 36.7812 176.924 36.5312 177.055C36.2865 177.185 36.0339 177.362 35.7734 177.586Z"
              fill="black"
            />
            <path
              d="M155.492 218.609H155.617V219.836H155.492C154.727 219.836 154.086 219.961 153.57 220.211C153.055 220.456 152.646 220.786 152.344 221.203C152.042 221.615 151.823 222.078 151.688 222.594C151.557 223.109 151.492 223.633 151.492 224.164V225.836C151.492 226.341 151.552 226.789 151.672 227.18C151.792 227.565 151.956 227.891 152.164 228.156C152.372 228.422 152.607 228.622 152.867 228.758C153.133 228.893 153.409 228.961 153.695 228.961C154.029 228.961 154.326 228.898 154.586 228.773C154.846 228.643 155.065 228.464 155.242 228.234C155.424 228 155.562 227.724 155.656 227.406C155.75 227.089 155.797 226.74 155.797 226.359C155.797 226.021 155.755 225.695 155.672 225.383C155.589 225.065 155.461 224.784 155.289 224.539C155.117 224.289 154.901 224.094 154.641 223.953C154.385 223.807 154.081 223.734 153.727 223.734C153.326 223.734 152.951 223.833 152.602 224.031C152.258 224.224 151.974 224.479 151.75 224.797C151.531 225.109 151.406 225.451 151.375 225.82L150.609 225.812C150.682 225.229 150.818 224.732 151.016 224.32C151.219 223.904 151.469 223.565 151.766 223.305C152.068 223.039 152.404 222.846 152.773 222.727C153.148 222.602 153.544 222.539 153.961 222.539C154.529 222.539 155.018 222.646 155.43 222.859C155.841 223.073 156.18 223.359 156.445 223.719C156.711 224.073 156.906 224.474 157.031 224.922C157.161 225.365 157.227 225.82 157.227 226.289C157.227 226.826 157.151 227.328 157 227.797C156.849 228.266 156.622 228.677 156.32 229.031C156.023 229.385 155.656 229.661 155.219 229.859C154.781 230.057 154.273 230.156 153.695 230.156C153.081 230.156 152.544 230.031 152.086 229.781C151.628 229.526 151.247 229.188 150.945 228.766C150.643 228.344 150.417 227.875 150.266 227.359C150.115 226.844 150.039 226.32 150.039 225.789V225.109C150.039 224.307 150.12 223.521 150.281 222.75C150.443 221.979 150.721 221.281 151.117 220.656C151.518 220.031 152.073 219.534 152.781 219.164C153.49 218.794 154.393 218.609 155.492 218.609Z"
              fill="black"
            />
            <path d="M142.297 193.625V194.438L137.586 205H136.062L140.766 194.812H134.609V193.625H142.297Z" fill="black" />
            <path
              d="M41.1172 64.9219C41.1172 65.6146 40.9557 66.2031 40.6328 66.6875C40.3151 67.1667 39.8828 67.5312 39.3359 67.7812C38.7943 68.0312 38.1823 68.1562 37.5 68.1562C36.8177 68.1562 36.2031 68.0312 35.6562 67.7812C35.1094 67.5312 34.6771 67.1667 34.3594 66.6875C34.0417 66.2031 33.8828 65.6146 33.8828 64.9219C33.8828 64.4688 33.9688 64.0547 34.1406 63.6797C34.3177 63.2995 34.5651 62.9688 34.8828 62.6875C35.2057 62.4062 35.5859 62.1901 36.0234 62.0391C36.4661 61.8828 36.9531 61.8047 37.4844 61.8047C38.1823 61.8047 38.8047 61.9401 39.3516 62.2109C39.8984 62.4766 40.3281 62.8438 40.6406 63.3125C40.9583 63.7812 41.1172 64.3177 41.1172 64.9219ZM39.6641 64.8906C39.6641 64.4688 39.5729 64.0964 39.3906 63.7734C39.2083 63.4453 38.9531 63.1901 38.625 63.0078C38.2969 62.8255 37.9167 62.7344 37.4844 62.7344C37.0417 62.7344 36.6589 62.8255 36.3359 63.0078C36.0182 63.1901 35.7708 63.4453 35.5938 63.7734C35.4167 64.0964 35.3281 64.4688 35.3281 64.8906C35.3281 65.3281 35.4141 65.7031 35.5859 66.0156C35.763 66.3229 36.013 66.5599 36.3359 66.7266C36.6641 66.888 37.0521 66.9688 37.5 66.9688C37.9479 66.9688 38.3333 66.888 38.6562 66.7266C38.9792 66.5599 39.2266 66.3229 39.3984 66.0156C39.5755 65.7031 39.6641 65.3281 39.6641 64.8906ZM40.8516 59.5859C40.8516 60.138 40.7057 60.6354 40.4141 61.0781C40.1224 61.5208 39.724 61.8698 39.2188 62.125C38.7135 62.3802 38.1406 62.5078 37.5 62.5078C36.849 62.5078 36.2682 62.3802 35.7578 62.125C35.2526 61.8698 34.8568 61.5208 34.5703 61.0781C34.2839 60.6354 34.1406 60.138 34.1406 59.5859C34.1406 58.9245 34.2839 58.362 34.5703 57.8984C34.862 57.4349 35.2604 57.0807 35.7656 56.8359C36.2708 56.5911 36.8464 56.4688 37.4922 56.4688C38.1432 56.4688 38.7214 56.5911 39.2266 56.8359C39.7318 57.0807 40.1276 57.4349 40.4141 57.8984C40.7057 58.362 40.8516 58.9245 40.8516 59.5859ZM39.4062 59.6094C39.4062 59.2292 39.3255 58.8932 39.1641 58.6016C39.0026 58.3099 38.7786 58.0807 38.4922 57.9141C38.2057 57.7422 37.8724 57.6562 37.4922 57.6562C37.112 57.6562 36.7786 57.737 36.4922 57.8984C36.2109 58.0547 35.9896 58.2786 35.8281 58.5703C35.6719 58.862 35.5938 59.2083 35.5938 59.6094C35.5938 60 35.6719 60.3411 35.8281 60.6328C35.9896 60.9245 36.2135 61.151 36.5 61.3125C36.7865 61.474 37.1198 61.5547 37.5 61.5547C37.8802 61.5547 38.2109 61.474 38.4922 61.3125C38.7786 61.151 39.0026 60.9245 39.1641 60.6328C39.3255 60.3411 39.4062 60 39.4062 59.6094Z"
              fill="black"
            />
            <path d="M0 241.5L355 241.5" stroke="black" stroke-dasharray="2 2" />
            <path d="M0 112.5L355.5 112.5" stroke="black" stroke-dasharray="2 2" />
          </svg>

          <p className="mt-5 text-sm text-white">Example of Size Alternating Stack packing</p>
        </div>
      </div>
    </>
  );
};

export default SASArticle;
